gibbsDraws = matrix(0,NDraws,2)
for( i in 1:NDraws){
#####FROM LECTURE 2#######
w = (n/sigma) / ((n/sigma) + (1/tau_0))
mu_n = w*x + (1-w)*mu_0
tau_n = 1/((n/sigma) + (1/tau_0))
##########################
mu = rnorm(1,mu_n, sqrt(tau_n))
gibbsDraws[i,1] = mu
tau = (nu_0*sigma_0 + sum((data[,1]-mu)^2))/(n+nu_0)
sigma = ((nu_n-1)-tau)/rchisq(1,nu_n-1)
gibbsDraws[i,2] = sigma
}
hist(gibbsDraws[,1], breaks = 80)
hist(gibbsDraws[,2], breaks = 80)
data =read.delim("/home/krisi211/Desktop/TDDE07/Lab3/rainfall.dat")
set.seed(123)
## a)
# Init values
x = mean(data[,1])
n = length(data[,1])
###### Random values #######
mu_0 = x
tau_0 = 100
nu_0 = 3
sigma_0 = 40
sigma = 40 #Init sigma value
############################
nu_n = nu_0 + n
NDraws = 5000
#Gibbs sampling
gibbsDraws = matrix(0,NDraws,2)
for( i in 1:NDraws){
#####FROM LECTURE 2#######
w = (n/sigma) / ((n/sigma) + (1/tau_0))
mu_n = w*x + (1-w)/mu_0
tau_n = 1/((n/sigma) + (1/tau_0))
##########################
mu = rnorm(1,mu_n, sqrt(tau_n))
gibbsDraws[i,1] = mu
tau = (nu_0*sigma_0 + sum((data[,1]-mu)^2))/(n+nu_0)
sigma = ((nu_n-1)-tau)/rchisq(1,nu_n-1)
gibbsDraws[i,2] = sigma
}
hist(gibbsDraws[,1], breaks = 80)
hist(gibbsDraws[,2], breaks = 80)
data =read.delim("/home/krisi211/Desktop/TDDE07/Lab3/rainfall.dat")
set.seed(123)
## a)
# Init values
x = mean(data[,1])
n = length(data[,1])
###### Random values #######
mu_0 = 30
tau_0 = 10
nu_0 = 3
sigma_0 = 1
sigma = 1 #Init sigma value
############################
nu_n = nu_0 + n
NDraws = 5000
#Gibbs sampling
gibbsDraws = matrix(0,NDraws,2)
for( i in 1:NDraws){
#####FROM LECTURE 2#######
w = (n/sigma) / ((n/sigma) + (1/tau_0))
mu_n = w*x + (1-w)*mu_0
tau_n = 1/((n/sigma) + (1/tau_0))
##########################
mu = rnorm(1,mu_n, sqrt(tau_n))
gibbsDraws[i,1] = mu
tau = (nu_0*sigma_0 + sum((data[,1]-mu)^2))/(n+nu_0)
sigma = ((nu_n-1)-tau)/rchisq(1,nu_n-1)
gibbsDraws[i,2] = sigma
}
hist(gibbsDraws[,1], breaks = 80)
hist(gibbsDraws[,2], breaks = 80)
data =read.delim("/home/krisi211/Desktop/TDDE07/Lab3/rainfall.dat")
set.seed(123)
## a)
# Init values
x = mean(data[,1])
n = length(data[,1])
###### Random values #######
mu_0 = 30
tau_0 = 10
nu_0 = 3
sigma_0 = 1
sigma = 1 #Init sigma value
############################
nu_n = nu_0 + n
NDraws = 5000
#Gibbs sampling
gibbsDraws = matrix(0,NDraws,2)
for( i in 1:NDraws){
#####FROM LECTURE 2#######
w = (n/sigma) / ((n/sigma) + (1/tau_0))
mu_n = w*x + (1-w)*mu_0
tau_n = 1/((n/sigma) + (1/tau_0))
##########################
mu = rnorm(1,x, sqrt(sigma/n))
gibbsDraws[i,1] = mu
tau = (nu_0*sigma_0 + sum((data[,1]-mu)^2))/(n+nu_0)
sigma = ((nu_n-1)-tau)/rchisq(1,nu_n-1)
gibbsDraws[i,2] = sigma
}
hist(gibbsDraws[,1], breaks = 80)
hist(gibbsDraws[,2], breaks = 80)
data =read.delim("/home/krisi211/Desktop/TDDE07/Lab3/rainfall.dat")
set.seed(123)
## a)
# Init values
x = mean(data[,1])
n = length(data[,1])
###### Random values #######
mu_0 = 30
tau_0 = 10
nu_0 = 3
sigma_0 = 1
sigma = 1 #Init sigma value
############################
nu_n = nu_0 + n
NDraws = 5000
#Gibbs sampling
gibbsDraws = matrix(0,NDraws,2)
for( i in 1:NDraws){
#####FROM LECTURE 2#######
w = (n/sigma) / ((n/sigma) + (1/tau_0))
mu_n = w*x + (1-w)*mu_0
tau_n = 1/((n/sigma) + (1/tau_0))
##########################
mu = rnorm(1,mu_n, (tau_n)
gibbsDraws[i,1] = mu
tau = (nu_0*sigma_0 + sum((data[,1]-mu)^2))/(n+nu_0)
sigma = ((nu_n-1)-tau)/rchisq(1,nu_n-1)
gibbsDraws[i,2] = sigma
}
hist(gibbsDraws[,1], breaks = 80)
hist(gibbsDraws[,2], breaks = 80)
data =read.delim("/home/krisi211/Desktop/TDDE07/Lab3/rainfall.dat")
set.seed(123)
## a)
# Init values
x = mean(data[,1])
n = length(data[,1])
###### Random values #######
mu_0 = 30
tau_0 = 10
nu_0 = 3
sigma_0 = 1
sigma = 1 #Init sigma value
############################
nu_n = nu_0 + n
NDraws = 5000
#Gibbs sampling
gibbsDraws = matrix(0,NDraws,2)
for( i in 1:NDraws){
#####FROM LECTURE 2#######
w = (n/sigma) / ((n/sigma) + (1/tau_0))
mu_n = w*x + (1-w)*mu_0
tau_n = 1/((n/sigma) + (1/tau_0))
##########################
mu = rnorm(1,mu_n, tau_n)
gibbsDraws[i,1] = mu
tau = (nu_0*sigma_0 + sum((data[,1]-mu)^2))/(n+nu_0)
sigma = ((nu_n-1)-tau)/rchisq(1,nu_n-1)
gibbsDraws[i,2] = sigma
}
hist(gibbsDraws[,1], breaks = 80)
hist(gibbsDraws[,2], breaks = 80)
data =read.delim("/home/krisi211/Desktop/TDDE07/Lab3/rainfall.dat")
set.seed(123)
## a)
# Init values
x = mean(data[,1])
n = length(data[,1])
###### Random values #######
mu_0 = 30
tau_0 = 10
nu_0 = 3
sigma_0 = 1
sigma = 1 #Init sigma value
############################
nu_n = nu_0 + n
NDraws = 5000
#Gibbs sampling
gibbsDraws = matrix(0,NDraws,2)
for( i in 1:NDraws){
#####FROM LECTURE 2#######
w = (n/sigma) / ((n/sigma) + (1/tau_0))
mu_n = w*x + (1-w)*mu_0
tau_n = 1/((n/sigma) + (1/tau_0))
##########################
mu = rnorm(1,mu_n, tau_n)
gibbsDraws[i,1] = mu
tau = (nu_0*sigma_0 + sum((data[,1]-mu)^2))/(n+nu_0)
sigma = ((nu_n-1)-tau)/rchisq(1,nu_n-1)
gibbsDraws[i,2] = sigma
}
hist(gibbsDraws[,1], breaks = 80)
hist(gibbsDraws[,2], breaks = 80)
data =read.delim("/home/krisi211/Desktop/TDDE07/Lab3/rainfall.dat")
set.seed(123)
## a)
# Init values
x = mean(data[,1])
n = length(data[,1])
###### Random values #######
mu_0 = 30
tau_0 = 10
nu_0 = 3
sigma_0 = 1
sigma = 1 #Init sigma value
############################
nu_n = nu_0 + n
NDraws = 5000
#Gibbs sampling
gibbsDraws = matrix(0,NDraws,2)
for( i in 1:NDraws){
#####FROM LECTURE 2#######
w = (n/sigma) / ((n/sigma) + (1/tau_0))
mu_n = w*x + (1-w)*mu_0
tau_n = 1/((n/sigma) + (1/tau_0))
##########################
mu = rnorm(1,mu_n, tau_n)
gibbsDraws[i,1] = mu
tau = (nu_0*sigma_0 + sum((data[,1]-mu)^2))/(n+nu_0)
sigma = ((nu_n-1)-tau)/rchisq(1,nu_n-1)
gibbsDraws[i,2] = sigma
}
hist(gibbsDraws[,1], breaks = 80)
hist(gibbsDraws[,2], breaks = 80)
data =read.delim("/home/krisi211/Desktop/TDDE07/Lab3/rainfall.dat")
set.seed(123)
## a)
# Init values
x = mean(data[,1])
n = length(data[,1])
###### Random values #######
mu_0 = 30
tau_0 = 10
nu_0 = 3
sigma_0 = 1
sigma = 1 #Init sigma value
############################
nu_n = nu_0 + n
NDraws = 5000
#Gibbs sampling
gibbsDraws = matrix(0,NDraws,2)
for( i in 1:NDraws){
#####FROM LECTURE 2#######
w = (n/sigma) / ((n/sigma) + (1/tau_0))
mu_n = w*x + (1-w)*mu_0
tau_n = 1/((n/sigma) + (1/tau_0))
##########################
mu = rnorm(1,mu_n,sqrt(tau_n))
gibbsDraws[i,1] = mu
tau = (nu_0*sigma_0 + sum((data[,1]-mu)^2))/(n+nu_0)
sigma = ((nu_n-1)-tau)/rchisq(1,nu_n-1)
gibbsDraws[i,2] = sigma
}
hist(gibbsDraws[,1], breaks = 80)
hist(gibbsDraws[,2], breaks = 80)
data =read.delim("/home/krisi211/Desktop/TDDE07/Lab3/rainfall.dat")
set.seed(123)
## a)
# Init values
x = mean(data[,1])
n = length(data[,1])
###### Random values #######
mu_0 = 30
tau_0 = 10
nu_0 = 3
sigma_0 = 1
sigma = 1 #Init sigma value
############################
nu_n = nu_0 + n
NDraws = 5000
#Gibbs sampling
gibbsDraws = matrix(0,NDraws,2)
for( i in 1:NDraws){
#####FROM LECTURE 2#######
w = (n/sigma) / ((n/sigma) + (1/tau_0))
mu_n = w*x + (1-w)*mu_0
tau_n = 1/((n/sigma) + (1/tau_0))
##########################
mu = rnorm(1,mu_n,tau_n)
gibbsDraws[i,1] = mu
tau = (nu_0*sigma_0 + sum((data[,1]-mu)^2))/(n+nu_0)
sigma = ((nu_n-1)-tau)/rchisq(1,nu_n-1)
gibbsDraws[i,2] = sigma
}
hist(gibbsDraws[,1], breaks = 80)
hist(gibbsDraws[,2], breaks = 80)
?rnorm
data =read.delim("/home/krisi211/Desktop/TDDE07/Lab3/rainfall.dat")
set.seed(123)
## a)
# Init values
x = mean(data[,1])
n = length(data[,1])
###### Random values #######
mu_0 = 30
tau_0 = 10
nu_0 = 3
sigma_0 = 1
sigma = 1 #Init sigma value
############################
nu_n = nu_0 + n
NDraws = 5000
#Gibbs sampling
gibbsDraws = matrix(0,NDraws,2)
for( i in 1:NDraws){
#####FROM LECTURE 2#######
w = (n/sigma) / ((n/sigma) + (1/tau_0))
mu_n = w*x + (1-w)*mu_0
tau_n = 1/((n/sigma) + (1/tau_0))
##########################
mu = rnorm(1,mu_n,sqrt(tau_n))
gibbsDraws[i,1] = mu
tau = (nu_0*sigma_0 + sum((data[,1]-mu)^2))/(n+nu_0)
sigma = ((nu_n-1)-tau)/rchisq(1,nu_n-1)
gibbsDraws[i,2] = sigma
}
hist(gibbsDraws[,1], breaks = 80)
hist(gibbsDraws[,2], breaks = 80)
y = as.matrix(data[1])
X = as.matrix(data[,-1])
mu = matrix(0,dim(X)[2],1)
sigma = 100 * solve(t(X)%*%X)
initVal = c(rep(0,dim(X)[2]))
library("mvtnorm")
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y%*%betas%*%X - exp(betas%*%X) - log(factorial(y))))
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y%*%betas%*%X - exp(betas%*%X) - log(factorial(y))))
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y*betas%*%X - exp(betas%*%X) - log(factorial(y))))
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
res(0,2)
rep(0,2)
a = rep(0,2)
a
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y*X%*%betas - exp(betas%*%X) - log(factorial(y))))
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y*X%*%betas - exp(X%*%betas) - log(factorial(y))))
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
beta.tilde = OptimResults$par
inv.hessian = -solve(OptimResults$hessian)
beta = rmvnorm(10000, beta.tilde, inv.hessian)
hist(beta)
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y%*%X%*%betas - exp(X%*%betas) - log(factorial(y))))
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(X%*%betas*y - exp(X%*%betas) - log(factorial(y))))
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
beta.tilde = OptimResults$par
inv.hessian = -solve(OptimResults$hessian)
beta = rmvnorm(10000, beta.tilde, inv.hessian)
hist(beta)
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(X%*%betas*y - exp(X%*%betas) - log(factorial(y))))
if (abs(logPos) == Inf) logPos = -20001
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
beta.tilde = OptimResults$par
inv.hessian = -solve(OptimResults$hessian)
beta = rmvnorm(10000, beta.tilde, inv.hessian)
hist(beta)
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(X%*%t(betas)*y - exp(X%*%t(betas)) - log(factorial(y))))
if (abs(logPos) == Inf) logPos = -20001
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
beta.tilde = OptimResults$par
inv.hessian = -solve(OptimResults$hessian)
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y*X%*%t(betas) - exp(X%*%t(betas)) - log(factorial(y))))
if (abs(logPos) == Inf) logPos = -20001
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
beta.tilde = OptimResults$par
inv.hessian = -solve(OptimResults$hessian)
beta = rmvnorm(10000, beta.tilde, inv.hessian)
hist(beta)
data = read.delim("/home/krisi211/Desktop/TDDE07/Lab3/eBayNumberOfBidderData.dat",sep = "")
X = as.matrix(data[,-1])
data = read.delim("/home/krisi211/Desktop/TDDE07/Lab3/eBayNumberOfBidderData.dat",sep = "")
data = read.delim("/home/ponsv690/Documents/TDDE07/Lab3/eBayNumberOfBidderData.dat",sep = "")
X = as.matrix(data[,-1])
y = data[1]
## a)
glm.model= glm(nBids ~0+.,data = data, family = poisson)
mu = matrix(0,dim(X)[2],1)
sigma = 100 * solve(t(X)%*%X)
initVal = c(rep(0,dim(X)[2]))
library("mvtnorm")
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y*X%*%t(betas) - exp(X%*%t(betas)) - log(factorial(y))))
if (abs(logPos) == Inf) logPos = -20001
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
beta.tilde = OptimResults$par
inv.hessian = -solve(OptimResults$hessian)
beta = rmvnorm(10000, beta.tilde, inv.hessian)
hist(beta)
mu = matrix(0,dim(X)[2],1)
sigma = 100 * solve(t(X)%*%X)
initVal = c(rep(0,dim(X)[2]))
library("mvtnorm")
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y*X%*%t(betas) - exp(X%*%t(betas)) - log(factorial(y))))
if (abs(logPos) == Inf) logPos = -20001
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y*t(betas)%*%X - exp(t(betas)%*%X) - log(factorial(y))))
if (abs(logPos) == Inf) logPos = -20001
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
t(betas)
t(initVal)
initVal
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y*t(betas)%*%X - exp(t(betas)%*%X) - log(factorial(y))))
if (abs(logPos) == Inf) logPos = -20001
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y*X%*%t(betas) - exp(t(betas)%*%X) - log(factorial(y))))
if (abs(logPos) == Inf) logPos = -20001
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
X%*%initVal
X%*%t(initVal)
t(X)%*%betas
t(X)%*%initVal
initVal%*%t(X)
logPoisson = function(betas, y,X,mu,sigma){
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y*betas%*%t(X) - exp(betas%*%t(X)) - log(factorial(y))))
if (abs(logPos) == Inf) logPos = -20001
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
beta.tilde = OptimResults$par
inv.hessian = -solve(OptimResults$hessian)
beta = rmvnorm(10000, beta.tilde, inv.hessian)
hist(beta)
hej
a = 1
a
)
logPoisson = function(betas, y,X,mu,sigma){
logPos = (sum(y*betas%*%t(X) - exp(betas%*%t(X)) - log(factorial(y))))
if (abs(logPos) == Inf) logPos = -20001
logPrior = dmvnorm(betas, mu, sigma)
return(logPos + logPrior)
}
OptimResults = optim(initVal,logPoisson,gr=NULL,y,X,mu,sigma,method=c("BFGS"),control=list(fnscale=-1),hessian=TRUE)
beta.tilde = OptimResults$par
inv.hessian = -solve(OptimResults$hessian)
beta = rmvnorm(10000, beta.tilde, inv.hessian)
hist(beta)
(colMeans(beta))
glm.model
(colMeans(beta))
glm.model
coef(glm.model)
